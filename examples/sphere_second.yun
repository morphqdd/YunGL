use "utils/viewMatrix";
use "utils/projectionMatrix";

export class Sphere {
    init(camera, light, radius, latSegs, lonSegs) {
        let dimensions = getWindowDimensions();
        let projectionM = projectionMatrix(dimensions.width, dimensions.height);

        self.camera = camera;

        self.position = [0, 0, 0];
        self.rotation = [0,0,0];
        self.scale = [1,1,1];

        self.pipeline = {
            attributes: {
                in: {
                    position: "vec4",
                    normal: "vec3",
                    uv: "vec2"
                },
                out: {
                    v_normal: "vec3",
                    v_position: "vec3",
                    v_world_pos: "vec3",
                    v_world_normal: "vec3",
                    v_uv: "vec2"
                }
            },
            lights: {
                1: light
            },
            uniform: {
                    model: { type: "mat4", value: self._makeModel() },
                    view: { type: "mat4", value: camera.getViewMatrix() },
                    projection: { type: "mat4", value: projectionM },
                    color: { type: "vec3", value: [0.5, 0.4, 1] },
                    u_view_pos: { type: "vec3", value: camera.position },
                    specular_strength: { type: "float", value: 0.5 },
                    shininess: { type: "float", value: 32 }
                },
            primitive: "triangles"
        };

        let data_ = [];

        for (let lat = 0; lat < latSegs; lat = lat + 1) {
            let a_0 = lat * 3.1415 / latSegs;
            let a_1 = (lat + 1) * 3.1415 / latSegs;
            let sin0 = sin(a_0);
            let cos0 = cos(a_0);
            let sin1 = sin(a_1);
            let cos1 = cos(a_1);

            for (let lon = 0; lon < lonSegs; lon = lon + 1) {
                let b0 = lon * 2.0*3.1415 / lonSegs;
                let b1 = (lon + 1) * 2.0*3.1415 / lonSegs;
                let sinb0 = sin(b0);
                let cosb0 = cos(b0);
                let sinb1 = sin(b1);
                let cosb1 = cos(b1);


                let p00 = [cosb0 * sin0, cos0, sinb0 * sin0];
                let p10 = [cosb1 * sin0, cos0, sinb1 * sin0];
                let p01 = [cosb0 * sin1, cos1, sinb0 * sin1];
                let p11 = [cosb1 * sin1, cos1, sinb1 * sin1];


                data_ + self.vertex(p00, p00, radius);
                data_ + self.vertex(p11, p11, radius);
                data_ + self.vertex(p10, p10, radius);

                data_ + self.vertex(p00, p00, radius);
                data_ + self.vertex(p01, p01, radius);
                data_ + self.vertex(p11, p11, radius);
            }
        }

        self.vertices = {
            data: data_,
            layout: ["vec3", "normal"]
        };
    }

    _makeModel() {
        let T = self.position;
        let R = map(self.rotation, fun(elm) { return rad(elm); });
        let S = self.scale;

        let translation = [
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 1, 0],
            [T[0], T[1], T[2], 1]
        ];

        let scale = [
            [S[0], 0, 0, 0],
            [0, S[1], 0, 0],
            [0, 0, S[2], 0],
            [0, 0, 0, 1]
        ];

        let rx = [
            [1, 0, 0, 0],
            [0, cos(R[0]), -sin(R[0]), 0],
            [0, sin(R[0]), cos(R[0]),0],
            [0, 0, 0, 1]
        ];

        let ry = [
            [cos(R[1]), sin(R[1]), 0, 0],
            [0, 1, 0, 0],
            [-sin(R[1]), 0, cos(R[0]),0],
            [0, 0, 0, 1]
        ];

        let rz = [
            [cos(R[0]), -sin(R[0]), 0, 0],
            [sin(R[0]), cos(R[0]), 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ];

        let rotation = mulMat4(mulMat4(rx, ry), rz);
        return mulMat4(mulMat4(scale, rotation ), translation);
    }

    update(dt) {

        self.pipeline.uniform.view.value = self.camera.getViewMatrix();
        self.pipeline.uniform.projection.value = projectionMatrix(
            getWindowDimensions().width,
            getWindowDimensions().height
        );
        self.pipeline.uniform.u_view_pos.value = self.camera.position;
        self.pipeline.uniform.model.value = self._makeModel();
    }

    translate(coord) {
        self.position = coord;
    }

    rotate(rotation) {
        self.rotation = rotation;
    }

    setScale(vScale) {
        self.scale = vScale;
    }

    vertex(pos, norm, radius) {
        return {
            x: pos[0] * radius,
            y: pos[1] * radius,
            z: pos[2] * radius,
            nx: norm[0],
            ny: norm[1],
            nz: norm[2]
        };
    }
}