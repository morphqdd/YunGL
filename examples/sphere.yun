use "mesh";

export class Sphere < Mesh {
    init(radius, latSegs, lonSegs) {
        super.init();

        let data_ = [];

        for (let lat = 0; lat < latSegs; lat = lat + 1) {
            let a_0 = lat * 3.1415 / latSegs;
            let a_1 = (lat + 1) * 3.1415 / latSegs;
            let sin0 = sin(a_0);
            let cos0 = cos(a_0);
            let sin1 = sin(a_1);
            let cos1 = cos(a_1);

            for (let lon = 0; lon < lonSegs; lon = lon + 1) {
                let b0 = lon * 2.0*3.1415 / lonSegs;
                let b1 = (lon + 1) * 2.0*3.1415 / lonSegs;
                let sinb0 = sin(b0);
                let cosb0 = cos(b0);
                let sinb1 = sin(b1);
                let cosb1 = cos(b1);


                let p00 = [cosb0 * sin0, cos0, sinb0 * sin0];
                let p10 = [cosb1 * sin0, cos0, sinb1 * sin0];
                let p01 = [cosb0 * sin1, cos1, sinb0 * sin1];
                let p11 = [cosb1 * sin1, cos1, sinb1 * sin1];


                data_ + self.vertex(p00, p00, radius);
                data_ + self.vertex(p11, p11, radius);
                data_ + self.vertex(p10, p10, radius);

                data_ + self.vertex(p00, p00, radius);
                data_ + self.vertex(p01, p01, radius);
                data_ + self.vertex(p11, p11, radius);
            }
        }

        self.pipeline = {
            attributes: {
                in: {
                    position: "vec4",
                    normal:   "vec3"
                },
                out: {
                    v_world_pos:    "vec3",
                    v_world_normal: "vec3"
                }
            },
            uniform: {
                model: { type: "mat4", value: super.makeModel() },
                color: { type: "vec3", value: [0.8, 0.7, 0.6] },
                specular_strength: { type: "float", value: 10 },
                shininess: { type: "float", value: 100 }
            },
            primitive: "triangles"
        };

        self.vertices = {
            data: data_,
            layout: ["vec3", "normal"]
        };
    }


    vertex(pos, norm, radius) {
        return {
            x: pos[0] * radius,
            y: pos[1] * radius,
            z: pos[2] * radius,
            nx: norm[0],
            ny: norm[1],
            nz: norm[2]
        };
    }
}
