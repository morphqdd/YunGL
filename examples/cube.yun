use "utils/viewMatrix";
use "utils/projectionMatrix";

export class Cube {
    init(camera, light, image) {
        let dimensions = getWindowDimensions();
        let projectionM = projectionMatrix(dimensions.width, dimensions.height);

        self.camera = camera;
        self.position = [0,0,0];

        self.pipeline = {
            attributes: {
                in: {
                    position: "vec4",
                    normal: "vec3",
                    uv: "vec2"
                },
                out: {
                    v_normal: "vec3",
                    v_position: "vec3",
                    v_world_pos: "vec3",
                    v_world_normal: "vec3",
                    v_uv: "vec2"
                }
            },
            lights: {
                1: light
            },
            uniform: {
                    model: { type: "mat4", value: self._makeModel(0) },
                    view: { type: "mat4", value: camera.getViewMatrix() },
                    projection: { type: "mat4", value: projectionM },
                    color: { type: "vec3", value: [1, 1, 1] },
                    u_view_pos: { type: "vec3", value: camera.position },
                    specular_strength: { type: "float", value: 0.5 },
                    shininess: { type: "float", value: 32.0 },
                    tex: { type: "sampler2D", value: image }
                },
            primitive: "triangles"
        };

        self.vertices = {
            data: [

                      { x:-0.5, y:-0.5, z: 0.5, nx: 0, ny: 0, nz: 1, u: 0, v: 0 },
                      { x: 0.5, y:-0.5, z: 0.5, nx: 0, ny: 0, nz: 1, u: 1, v: 0 },
                      { x: 0.5, y: 0.5, z: 0.5, nx: 0, ny: 0, nz: 1, u: 1, v: 1 },
                      { x:-0.5, y:-0.5, z: 0.5, nx: 0, ny: 0, nz: 1, u: 0, v: 0 },
                      { x: 0.5, y: 0.5, z: 0.5, nx: 0, ny: 0, nz: 1, u: 1, v: 1 },
                      { x:-0.5, y: 0.5, z: 0.5, nx: 0, ny: 0, nz: 1, u: 0, v: 1 },


                      { x: 0.5, y:-0.5, z:-0.5, nx: 0, ny: 0, nz:-1, u: 1, v: 0 },
                      { x:-0.5, y:-0.5, z:-0.5, nx: 0, ny: 0, nz:-1, u: 0, v: 0 },
                      { x:-0.5, y: 0.5, z:-0.5, nx: 0, ny: 0, nz:-1, u: 0, v: 1 },
                      { x: 0.5, y:-0.5, z:-0.5, nx: 0, ny: 0, nz:-1, u: 1, v: 0 },
                      { x:-0.5, y: 0.5, z:-0.5, nx: 0, ny: 0, nz:-1, u: 0, v: 1 },
                      { x: 0.5, y: 0.5, z:-0.5, nx: 0, ny: 0, nz:-1, u: 1, v: 1 },


                      { x: 0.5, y:-0.5, z: 0.5, nx: 1, ny: 0, nz: 0, u: 1, v: 0 },
                      { x: 0.5, y:-0.5, z:-0.5, nx: 1, ny: 0, nz: 0, u: 0, v: 0 },
                      { x: 0.5, y: 0.5, z:-0.5, nx: 1, ny: 0, nz: 0, u: 0, v: 1 },
                      { x: 0.5, y:-0.5, z: 0.5, nx: 1, ny: 0, nz: 0, u: 1, v: 0 },
                      { x: 0.5, y: 0.5, z:-0.5, nx: 1, ny: 0, nz: 0, u: 0, v: 1 },
                      { x: 0.5, y: 0.5, z: 0.5, nx: 1, ny: 0, nz: 0, u: 1, v: 1 },


                      { x:-0.5, y:-0.5, z:-0.5, nx:-1, ny: 0, nz: 0, u: 0, v: 0 },
                      { x:-0.5, y:-0.5, z: 0.5, nx:-1, ny: 0, nz: 0, u: 1, v: 0 },
                      { x:-0.5, y: 0.5, z: 0.5, nx:-1, ny: 0, nz: 0, u: 1, v: 1 },
                      { x:-0.5, y:-0.5, z:-0.5, nx:-1, ny: 0, nz: 0, u: 0, v: 0 },
                      { x:-0.5, y: 0.5, z: 0.5, nx:-1, ny: 0, nz: 0, u: 1, v: 1 },
                      { x:-0.5, y: 0.5, z:-0.5, nx:-1, ny: 0, nz: 0, u: 0, v: 1 },


                      { x:-0.5, y: 0.5, z: 0.5, nx: 0, ny: 1, nz: 0, u: 0, v: 1 },
                      { x: 0.5, y: 0.5, z: 0.5, nx: 0, ny: 1, nz: 0, u: 1, v: 1 },
                      { x: 0.5, y: 0.5, z:-0.5, nx: 0, ny: 1, nz: 0, u: 1, v: 0 },
                      { x:-0.5, y: 0.5, z: 0.5, nx: 0, ny: 1, nz: 0, u: 0, v: 1 },
                      { x: 0.5, y: 0.5, z:-0.5, nx: 0, ny: 1, nz: 0, u: 1, v: 0 },
                      { x:-0.5, y: 0.5, z:-0.5, nx: 0, ny: 1, nz: 0, u: 0, v: 0 },


                      { x:-0.5, y:-0.5, z:-0.5, nx: 0, ny:-1, nz: 0, u: 0, v: 0 },
                      { x: 0.5, y:-0.5, z:-0.5, nx: 0, ny:-1, nz: 0, u: 1, v: 0 },
                      { x: 0.5, y:-0.5, z: 0.5, nx: 0, ny:-1, nz: 0, u: 1, v: 1 },
                      { x:-0.5, y:-0.5, z:-0.5, nx: 0, ny:-1, nz: 0, u: 0, v: 0 },
                      { x: 0.5, y:-0.5, z: 0.5, nx: 0, ny:-1, nz: 0, u: 1, v: 1 },
                      { x:-0.5, y:-0.5, z: 0.5, nx: 0, ny:-1, nz: 0, u: 0, v: 1 }
                  ],
                  layout: ["vec3", "normal", "uv"]
        };
    }

    _makeModel(t) {

        let model = [
            [2 * cos(t), 0, 2*sin(t), 0],
            [0, 2, 0, 0],
            [-2*sin(t), 0, 2*cos(t), 0],
            [self.position[0], self.position[1], self.position[2], 1]
        ];

        return model;
    }

    update(dt) {
        self.pipeline.uniform.model.value = self._makeModel(dt);
        self.pipeline.uniform.view.value = self.camera.getViewMatrix();

        let dimensions = getWindowDimensions();
        self.pipeline.uniform.projection.value = projectionMatrix(dimensions.width, dimensions.height);
        self.pipeline.uniform.u_view_pos.value = self.camera.position;
    }

    translate(coord) {
        self.position = coord;
        self.pipeline.uniform.model.value = self._makeModel(0);
    }
}
