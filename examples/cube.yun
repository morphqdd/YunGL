use "utils/viewMatrix";
use "utils/projectionMatrix";

export class Cube {
    init(viewM, projectionM, light) {
        self.pipeline = {
            attributes: {
                in: {
                    position: "vec4",
                    normal: "vec3"
                },
                out: {
                    v_normal: "vec3",
                    v_position: "vec3"
                }
            },
            uniform: {
                color: { type: "vec3", value: [1, 1, 1] },
                model: { type: "mat4", value: self._makeModel(0) },
                u_light: { type: "vec3", value: light },
                view: { type: "mat4", value: viewM },
                projection: { type: "mat4", value: projectionM }
            },
            primitive: "triangles"
        };

        self.vertices = {
                    data: [
                        { x:-0.5, y:-0.5, z: 0.5, nx: 0, ny: 0, nz: 1 },
                        { x: 0.5, y:-0.5, z: 0.5, nx: 0, ny: 0, nz: 1 },
                        { x: 0.5, y: 0.5, z: 0.5, nx: 0, ny: 0, nz: 1 },
                        { x:-0.5, y:-0.5, z: 0.5, nx: 0, ny: 0, nz: 1 },
                        { x: 0.5, y: 0.5, z: 0.5, nx: 0, ny: 0, nz: 1 },
                        { x:-0.5, y: 0.5, z: 0.5, nx: 0, ny: 0, nz: 1 },

                        { x: 0.5, y:-0.5, z:-0.5, nx: 0, ny: 0, nz:-1 },
                        { x:-0.5, y:-0.5, z:-0.5, nx: 0, ny: 0, nz:-1 },
                        { x:-0.5, y: 0.5, z:-0.5, nx: 0, ny: 0, nz:-1 },
                        { x: 0.5, y:-0.5, z:-0.5, nx: 0, ny: 0, nz:-1 },
                        { x:-0.5, y: 0.5, z:-0.5, nx: 0, ny: 0, nz:-1 },
                        { x: 0.5, y: 0.5, z:-0.5, nx: 0, ny: 0, nz:-1 },

                        { x: 0.5, y:-0.5, z: 0.5, nx: 1, ny: 0, nz: 0 },
                        { x: 0.5, y:-0.5, z:-0.5, nx: 1, ny: 0, nz: 0 },
                        { x: 0.5, y: 0.5, z:-0.5, nx: 1, ny: 0, nz: 0 },
                        { x: 0.5, y:-0.5, z: 0.5, nx: 1, ny: 0, nz: 0 },
                        { x: 0.5, y: 0.5, z:-0.5, nx: 1, ny: 0, nz: 0 },
                        { x: 0.5, y: 0.5, z: 0.5, nx: 1, ny: 0, nz: 0 },

                        { x:-0.5, y:-0.5, z:-0.5, nx:-1, ny: 0, nz: 0 },
                        { x:-0.5, y:-0.5, z: 0.5, nx:-1, ny: 0, nz: 0 },
                        { x:-0.5, y: 0.5, z: 0.5, nx:-1, ny: 0, nz: 0 },
                        { x:-0.5, y:-0.5, z:-0.5, nx:-1, ny: 0, nz: 0 },
                        { x:-0.5, y: 0.5, z: 0.5, nx:-1, ny: 0, nz: 0 },
                        { x:-0.5, y: 0.5, z:-0.5, nx:-1, ny: 0, nz: 0 },

                        { x:-0.5, y: 0.5, z: 0.5, nx: 0, ny: 1, nz: 0 },
                        { x: 0.5, y: 0.5, z: 0.5, nx: 0, ny: 1, nz: 0 },
                        { x: 0.5, y: 0.5, z:-0.5, nx: 0, ny: 1, nz: 0 },
                        { x:-0.5, y: 0.5, z: 0.5, nx: 0, ny: 1, nz: 0 },
                        { x: 0.5, y: 0.5, z:-0.5, nx: 0, ny: 1, nz: 0 },
                        { x:-0.5, y: 0.5, z:-0.5, nx: 0, ny: 1, nz: 0 },

                        { x:-0.5, y:-0.5, z:-0.5, nx: 0, ny:-1, nz: 0 },
                        { x: 0.5, y:-0.5, z:-0.5, nx: 0, ny:-1, nz: 0 },
                        { x: 0.5, y:-0.5, z: 0.5, nx: 0, ny:-1, nz: 0 },
                        { x:-0.5, y:-0.5, z:-0.5, nx: 0, ny:-1, nz: 0 },
                        { x: 0.5, y:-0.5, z: 0.5, nx: 0, ny:-1, nz: 0 },
                        { x:-0.5, y:-0.5, z: 0.5, nx: 0, ny:-1, nz: 0 }
                    ],
                    layout: ["vec3", "normal"]
                };
    }

    _makeModel(t) {
        let c = cos(t);
                let s = sin(t);
                let a = 0.70710678;
                let oc = 1 - c;
                return [
                    [ c + oc*0.5,   oc*0.5,     a*s, 0 ],
                    [   oc*0.5,   c + oc*0.5,  -a*s, 0 ],
                    [   -a*s,        a*s,        c,  0 ],
                    [     0,          0,         3,  1 ]
                ];
    }

    update(dt) {
        self.pipeline.uniform.model.value = self._makeModel(dt);
    }

    getPipeline() {
        return self.pipeline;
    }

    getVertices() {
        return self.vertices;
    }
}
