use "utils/viewMatrix";
use "utils/projectionMatrix";

export class Mesh {
    init() {
        self.position = [0, 0, 0];
        self.rotation = [0,0,0];
        self.scale = [1,1,1];
        self.pipeline = {
            attributes: {
                in: {
                    position: "vec4",
                    normal: "vec3"
                },
                out: {
                    v_normal: "vec3",
                    v_position: "vec3",
                    v_world_pos: "vec3",
                    v_world_normal: "vec3"
                }
            },
            uniform: {
                model: { type: "mat4", value: self.makeModel() }
            },
            primitive: "triangles"
        };
    }

    setProjection(projection) {
        self.projection = projection;
        self.pipeline.uniform.projection = { type: "mat4", value: self.projection };
    }

    setCamera(camera) {
        self.camera = camera;
        self.pipeline.uniform.view = { type: "mat4", value: self.camera.getViewMatrix() };
        self.pipeline.uniform.u_view_pos = { type: "vec3", value: self.camera.position };
    }

    setLights(lights) {
        self.pipeline.lights = lights;
    }

    makeModel() {
        let T = self.position;
        let R = map(self.rotation, fun(elm) { return rad(elm); });
        let S = self.scale;

        let translation = [
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 1, 0],
            [T[0], T[1], T[2], 1]
        ];

        let scale = [
            [S[0], 0, 0, 0],
            [0, S[1], 0, 0],
            [0, 0, S[2], 0],
            [0, 0, 0, 1]
        ];

        let rx = [
            [1, 0, 0, 0],
            [0, cos(R[0]), -sin(R[0]), 0],
            [0, sin(R[0]), cos(R[0]),0],
            [0, 0, 0, 1]
        ];

        let ry = [
            [cos(R[1]), sin(R[1]), 0, 0],
            [0, 1, 0, 0],
            [-sin(R[1]), 0, cos(R[0]),0],
            [0, 0, 0, 1]
        ];

        let rz = [
            [cos(R[0]), -sin(R[0]), 0, 0],
            [sin(R[0]), cos(R[0]), 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ];

        let rotation = mulMat4(mulMat4(rx, ry), rz);
        return mulMat4(mulMat4(scale, rotation ), translation);
    }

    setPosition(coord) {
        self.position = coord;
    }

    setRotation(rotation) {
        self.rotation = rotation;
    }

    setScale(vScale) {
        self.scale = vScale;
    }

    update(dt) {
        self.pipeline.uniform.model.value = self.makeModel();
        self.pipeline.uniform.view.value = self.camera.getViewMatrix();
        let dimensions = getWindowDimensions();
        self.pipeline.uniform.projection.value = projectionMatrix(dimensions.width, dimensions.height);
        self.pipeline.uniform.u_view_pos.value = self.camera.position;
    }
}