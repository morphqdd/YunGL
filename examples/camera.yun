use "utils/viewMatrix";
use "utils/math";

export class Camera {
    init(position, target, up, speed, rotationSpeed) {
        self.position      = position;
        self.direction     = normalize(subtract(target, position));
        self.up            = normalize(up);
        self.worldUp       = normalize(up);
        self.speed         = speed;
        self.rotationSpeed = rotationSpeed;
        self.viewMatrix    = viewMatrix(self.position, add(self.position, self.direction), self.up);
    }

    updateViewMatrix() {
        self.viewMatrix = viewMatrix(self.position, add(self.position, self.direction), self.up);
    }

    moveForward() {
        self.position = add(self.position, scale(self.direction, self.speed));
        self.updateViewMatrix();
    }

    moveBackward() {
        self.position = subtract(self.position, scale(self.direction, self.speed));
        self.updateViewMatrix();
    }

    strafeLeft() {
        let right = normalize(cross(self.direction, self.up));
        self.position = subtract(self.position, scale(right, self.speed));
        self.updateViewMatrix();
    }

    strafeRight() {
        let right = normalize(cross(self.direction, self.up));
        self.position = add(self.position, scale(right, self.speed));
        self.updateViewMatrix();
    }

    moveUp() {
        self.position = add(self.position, scale(self.worldUp, self.speed));
        self.updateViewMatrix();
    }

    moveDown() {
        self.position = subtract(self.position, scale(self.worldUp, self.speed));
        self.updateViewMatrix();
    }

    yawLeft() {
        let rot = rotationMatrix(self.worldUp, self.rotationSpeed);
        self.direction = normalize(transformVector(rot, self.direction));
        self.up        = normalize(transformVector(rot, self.up));
        self.updateViewMatrix();
    }

    yawRight() {
        let rot = rotationMatrix(self.worldUp, -self.rotationSpeed);
        self.direction = normalize(transformVector(rot, self.direction));
        self.up        = normalize(transformVector(rot, self.up));
        self.updateViewMatrix();
    }

    pitchUp() {
        let right = normalize(cross(self.direction, self.up));
        let rot   = rotationMatrix(right, self.rotationSpeed);
        self.direction = normalize(transformVector(rot, self.direction));
        self.up        = normalize(transformVector(rot, self.up));
        self.updateViewMatrix();
    }

    pitchDown() {
        let right = normalize(cross(self.direction, self.up));
        let rot   = rotationMatrix(right, -self.rotationSpeed);
        self.direction = normalize(transformVector(rot, self.direction));
        self.up        = normalize(transformVector(rot, self.up));
        self.updateViewMatrix();
    }

    getViewMatrix() {
        return self.viewMatrix;
    }

    regKeyMove() {
        regKeyEvent("w", fun() { camera.moveForward(); });
        regKeyEvent("s", fun() { camera.moveBackward(); });
        regKeyEvent("a", fun() { camera.strafeLeft(); });
        regKeyEvent("d", fun() { camera.strafeRight(); });
        regKeyEvent("q", fun() { camera.moveUp(); });
        regKeyEvent("e", fun() { camera.moveDown(); });
        regKeyEvent("j", fun() { camera.yawLeft(); });
        regKeyEvent("l", fun() { camera.yawRight(); });
        regKeyEvent("i", fun() { camera.pitchUp(); });
        regKeyEvent("k", fun() { camera.pitchDown(); });
    }
}
