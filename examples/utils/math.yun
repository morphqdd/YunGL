// Vector and matrix math utilities for 3D operations

// Normalizes a vector to unit length
export let normalize = fun(v) {
    let length = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
    if length == 0 {
        return [0, 0, 0];
    }
    return [v[0] / length, v[1] / length, v[2] / length];
};

// Subtracts vector v2 from v1
export let subtract = fun(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
};

// Adds vector v2 to v1
export let add = fun(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
};

// Scales vector v by scalar s
export let scale = fun(v, s) {
    return [v[0] * s, v[1] * s, v[2] * s];
};

// Computes the cross product of v1 and v2
export let cross = fun(v1, v2) {
    return [
        v1[1] * v2[2] - v1[2] * v2[1],
        v1[2] * v2[0] - v1[0] * v2[2],
        v1[0] * v2[1] - v1[1] * v2[0]
    ];
};

// Creates a rotation matrix around the given axis by angle (in radians)
export let rotationMatrix = fun(axis, angle) {
    let c = cos(angle);
    let s = sin(angle);
    let t = 1 - c;
    let n = normalize(axis); // Ensure axis is normalized
    let x = n[0];
    let y = n[1];
    let z = n[2];

    return [
        [t * x * x + c, t * x * y - z * s, t * x * z + y * s, 0],
        [t * x * y + z * s, t * y * y + c, t * y * z - x * s, 0],
        [t * x * z - y * s, t * y * z + x * s, t * z * z + c, 0],
        [0, 0, 0, 1]
    ];
};

// Transforms a vector by a 4x4 matrix (assumes vector is 3D, w=1 for position)
export let transformVector = fun(matrix, vector) {
    let x = vector[0];
    let y = vector[1];
    let z = vector[2];
    let w = 1;

    let result = [
        matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z + matrix[0][3] * w,
        matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z + matrix[1][3] * w,
        matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z + matrix[2][3] * w
    ];

    // Normalize by w if needed (for homogeneous coordinates)
    let rw = matrix[3][0] * x + matrix[3][1] * y + matrix[3][2] * z + matrix[3][3] * w;
    if rw != 1 and rw != 0 {
        result[0] = result[0] / rw;
        result[1] = result[1] / rw;
        result[2] = result[2] / rw;
    }

    return result;
};

export let dot = fun(v1, v2) {
    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
};

export let mulMat4Vec4 = fun(m, v) {
  return [
    m[0][0]*v[0] + m[0][1]*v[1] + m[0][2]*v[2] + m[0][3]*v[3],
    m[1][0]*v[0] + m[1][1]*v[1] + m[1][2]*v[2] + m[1][3]*v[3],
    m[2][0]*v[0] + m[2][1]*v[1] + m[2][2]*v[2] + m[2][3]*v[3],
    m[3][0]*v[0] + m[3][1]*v[1] + m[3][2]*v[2] + m[3][3]*v[3]
  ];
};
